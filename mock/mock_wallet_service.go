// Code generated by MockGen. DO NOT EDIT.
// Source: service/wallet_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "wallet/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletService is a mock of IWalletService interface.
type MockIWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletServiceMockRecorder
}

// MockIWalletServiceMockRecorder is the mock recorder for MockIWalletService.
type MockIWalletServiceMockRecorder struct {
	mock *MockIWalletService
}

// NewMockIWalletService creates a new mock instance.
func NewMockIWalletService(ctrl *gomock.Controller) *MockIWalletService {
	mock := &MockIWalletService{ctrl: ctrl}
	mock.recorder = &MockIWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletService) EXPECT() *MockIWalletServiceMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockIWalletService) CreateWallet(username string) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", username)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletServiceMockRecorder) CreateWallet(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWalletService)(nil).CreateWallet), username)
}

// UpdateWalletByUsername mocks base method.
func (m *MockIWalletService) UpdateWalletByUsername(username string, balanceAdd int) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletByUsername", username, balanceAdd)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletByUsername indicates an expected call of UpdateWalletByUsername.
func (mr *MockIWalletServiceMockRecorder) UpdateWalletByUsername(username, balanceAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletByUsername", reflect.TypeOf((*MockIWalletService)(nil).UpdateWalletByUsername), username, balanceAdd)
}

// WalletByUsername mocks base method.
func (m *MockIWalletService) WalletByUsername(username string) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletByUsername", username)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletByUsername indicates an expected call of WalletByUsername.
func (mr *MockIWalletServiceMockRecorder) WalletByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletByUsername", reflect.TypeOf((*MockIWalletService)(nil).WalletByUsername), username)
}

// Wallets mocks base method.
func (m *MockIWalletService) Wallets() ([]model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wallets")
	ret0, _ := ret[0].([]model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wallets indicates an expected call of Wallets.
func (mr *MockIWalletServiceMockRecorder) Wallets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wallets", reflect.TypeOf((*MockIWalletService)(nil).Wallets))
}
