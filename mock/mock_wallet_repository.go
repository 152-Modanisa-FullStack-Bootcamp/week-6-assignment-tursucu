// Code generated by MockGen. DO NOT EDIT.
// Source: repository/wallet_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "wallet/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletRepo is a mock of IWalletRepo interface.
type MockIWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletRepoMockRecorder
}

// MockIWalletRepoMockRecorder is the mock recorder for MockIWalletRepo.
type MockIWalletRepoMockRecorder struct {
	mock *MockIWalletRepo
}

// NewMockIWalletRepo creates a new mock instance.
func NewMockIWalletRepo(ctrl *gomock.Controller) *MockIWalletRepo {
	mock := &MockIWalletRepo{ctrl: ctrl}
	mock.recorder = &MockIWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletRepo) EXPECT() *MockIWalletRepoMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockIWalletRepo) CheckUser(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockIWalletRepoMockRecorder) CheckUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockIWalletRepo)(nil).CheckUser), username)
}

// CreateWallet mocks base method.
func (m *MockIWalletRepo) CreateWallet(username string) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", username)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletRepoMockRecorder) CreateWallet(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWalletRepo)(nil).CreateWallet), username)
}

// FindAllWallet mocks base method.
func (m *MockIWalletRepo) FindAllWallet() ([]model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWallet")
	ret0, _ := ret[0].([]model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWallet indicates an expected call of FindAllWallet.
func (mr *MockIWalletRepoMockRecorder) FindAllWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWallet", reflect.TypeOf((*MockIWalletRepo)(nil).FindAllWallet))
}

// UpdateWalletByUsername mocks base method.
func (m *MockIWalletRepo) UpdateWalletByUsername(username string, newBalance int) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletByUsername", username, newBalance)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletByUsername indicates an expected call of UpdateWalletByUsername.
func (mr *MockIWalletRepoMockRecorder) UpdateWalletByUsername(username, newBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletByUsername", reflect.TypeOf((*MockIWalletRepo)(nil).UpdateWalletByUsername), username, newBalance)
}

// WalletByUsername mocks base method.
func (m *MockIWalletRepo) WalletByUsername(username string) (model.WalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletByUsername", username)
	ret0, _ := ret[0].(model.WalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WalletByUsername indicates an expected call of WalletByUsername.
func (mr *MockIWalletRepoMockRecorder) WalletByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletByUsername", reflect.TypeOf((*MockIWalletRepo)(nil).WalletByUsername), username)
}
